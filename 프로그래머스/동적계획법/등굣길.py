# 격자형 맵에 우물 좌표가 주어질 때 반대편으로 가기 위한 경우의 수?
# 결과값을 1,000,000,007로 나눈 나머지를 return
def solution(m, n, puddles):
    dp = [[0]*(m+1) for _ in range(n+1)] # 맵 만들기
    dp[1][1] = 1 # 시작점 (배열은 0부터, 좌표는 1부터 = 맵 크기 +1)
    for i,j in puddles: # 우물 위치 찾아서 -1로 처리
        dp[j][i] = -1 # 좌표 주의
    for i in range(1, n+1):
        for j in range(1, m+1):
            if dp[i][j] == -1: # 우물
                dp[i][j] = 0
                continue
            dp[i][j] += (dp[i - 1][j] + dp[i][j - 1]) % 1000000007
    return dp[n][m]


print(solution(4,3,[[2, 2]])) #4
'''
1. 일반 좌표계는 x,y이지만
컴퓨터 다차원 배열은 y,x가 된다. 가로4 세로3은 maps[3][4]이다. 
따라서 좌표계 조건을 받으면 x,y > y,x로 바꿔줘야 한다.
2. dp에 값은 경로의 수가 되고, 이동 방향은 오른쪽과 아래 두 개뿐이다.
따라서, dp[i][j] += (dp[i - 1][j] + dp[i][j - 1]) 
하나의 길은 값이 1이고, 좌측과 위에서 내려오는 합치는 구간만 더해준다.
'''